# Filename: CMakeLists.txt
# Created on: November  5, 2023
# Author: Lucas Ara√∫jo <araujolucas@dcc.ufmg.br>

CMAKE_MINIMUM_REQUIRED(VERSION 3.5)

# Set default parameters
PROJECT(MONEY_FOR_NOTHING)

SET(CMAKE_CXX_STANDARD 20)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)

# SQLite3 is required
FIND_PACKAGE(SQLite3 REQUIRED)

IF(SQLITE3_FOUND)
    MESSAGE(STATUS "SQLite3 found!")
    INCLUDE_DIRECTORIES(${sqlite3_INCLUDE_DIRS})
    LINK_LIBRARIES(${sqlite3_LIBRARIES})
ELSE()
    MESSAGE(FATAL_ERROR "SQLite3 not found!")
ENDIF()

# SPDLOG is required
FIND_PACKAGE(spdlog REQUIRED)

IF(spdlog_FOUND)
    MESSAGE(STATUS "spdlog found!")
    INCLUDE_DIRECTORIES(${spdlog_INCLUDE_DIRS})
    LINK_LIBRARIES(${spdlog_LIBRARIES})
ELSE()
    MESSAGE(FATAL_ERROR "spdlog not found!")
ENDIF()

# Google Test is required
FIND_PACKAGE(GTest REQUIRED)
IF(GTEST_FOUND)
    MESSAGE(STATUS "Google Test found!")
    INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIRS})
ELSE()
    MESSAGE(FATAL_ERROR "Google Test not found!")
ENDIF()

# Set compiler flags for different build types
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
    SET(EXECUTABLE_NAME "program_debug")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -O0 -Wall -Wextra -pedantic")
ELSE()
    SET(EXECUTABLE_NAME "program")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -Wall -Wextra -pedantic")
ENDIF()

MESSAGE(STATUS "C++ Compiler Flags:${CMAKE_CXX_FLAGS}")

SET(SRC_DIR ${CMAKE_SOURCE_DIR}/src)
SET(UNIT_TEST_DIR ${CMAKE_SOURCE_DIR}/test)
SET(INC_DIR ${CMAKE_SOURCE_DIR}/include)
SET(BENCHMARK_DIR ${CMAKE_SOURCE_DIR}/test/benchmark)

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build/libs)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/bin/Debug)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/bin/Release)

# Get all files in the folders SRC_DIR and UNIT_TEST_DIR
FILE(GLOB_RECURSE PROGRAM ${SRC_DIR}/*.c*)
FILE(GLOB_RECURSE UNIT_TESTS ${UNIT_TEST_DIR}/*.c*)

INCLUDE_DIRECTORIES(${INC_DIR})
INCLUDE_DIRECTORIES(${INC_DIR}/lib)
INCLUDE_DIRECTORIES(${INC_DIR}/exceptions)
INCLUDE_DIRECTORIES(${INC_DIR}/etc)

# Define the program lib
ADD_LIBRARY(mfn ${PROGRAM})

# Make executables
ADD_EXECUTABLE(program ${PROGRAM})
ADD_EXECUTABLE(unit_test ${UNIT_TESTS})

TARGET_LINK_LIBRARIES(program sqlite3)
TARGET_LINK_LIBRARIES(program spdlog)
TARGET_LINK_LIBRARIES(program fmt)
TARGET_LINK_LIBRARIES(program mfn)

# Link libs
TARGET_LINK_LIBRARIES(unit_test ${GTEST_LIBRARIES} ${GTEST_MAIN_LIBRARIES} pthread)
TARGET_LINK_LIBRARIES(unit_test sqlite3)
TARGET_LINK_LIBRARIES(unit_test spdlog)
TARGET_LINK_LIBRARIES(unit_test fmt)
TARGET_LINK_LIBRARIES(unit_test mfn)

TARGET_COMPILE_DEFINITIONS(program PRIVATE TEST_ENVIRONMENT=false)
